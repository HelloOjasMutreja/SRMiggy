spring.application.name=srmiggy-backend

# Supabase PostgreSQL Configuration
# Option 1: Use environment variables (recommended for production)
# Set DATABASE_URL and SUPABASE_DB_PASSWORD in your environment
# Option 2: Replace the placeholders below with your actual Supabase credentials
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://<your-project-ref>.supabase.co:5432/postgres}
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${SUPABASE_DB_PASSWORD:<your-supabase-password>}
spring.datasource.driver-class-name=org.postgresql.Driver

# HikariCP Connection Pool Configuration
spring.datasource.hikari.maximum-pool-size=${DB_MAX_POOL_SIZE:10}
spring.datasource.hikari.minimum-idle=${DB_MIN_IDLE:5}
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.auto-commit=true
spring.datasource.hikari.pool-name=SRMiggyHikariCP

# JPA Configuration for PostgreSQL
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
# Changed from validate to update to automatically create/update tables
# This allows the application to create tables on first run
# For production, you may want to use 'validate' after initial setup
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false

# JWT Configuration
jwt.secret=${JWT_SECRET:srmiggy2024secretkeyforsigningjwttokenspleasechangeinproduction}
jwt.expiration=86400000

# Server Configuration
server.port=8080

# CORS Configuration
cors.allowed-origins=${CORS_ORIGINS:http://localhost:5173,http://localhost:3000}

# Logging
logging.level.com.srmiggy=INFO
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
